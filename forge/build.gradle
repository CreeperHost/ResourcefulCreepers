plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "resourcefulcreepers.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    implementation 'io.sentry:sentry:5.7.2'

//    implementation "blue.endless:jankson:1.2.1"
//    shadowCommon "blue.endless:jankson:1.2.1"
}

def targetPackage = 'net/creeperhost/resourcefulcreeperhost'
def targetPackageJava = 'net.creeperhost.resourcefulcreeperhost'

compileJava {
    doFirst {
        ant.mkdir(dir: "${projectDir}/src/main/java/${targetPackage}")
        def newBuildInfo = new File("${projectDir}/src/main/java/${targetPackage}/BuildInfo.java")
        def templateBuildInfo = new File("${projectDir}/templates/TemplateBuildInfo.java")

        newBuildInfo.withWriter { def writer ->
            templateBuildInfo.eachLine { def line ->
                def newLine = line.replace("__PACKAGE", targetPackageJava)
                        .replace("__VERSION", versionDetails())
                        .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                writer.write(newLine + "\n");
            }
        }
    }
}


processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    dependencies {
        exclude(dependency("org.slf4j::"))
        exclude(dependency("javax.transaction::"))
    }

    configurations = [project.configurations.shadowCommon]
    relocate 'blue.endless.jankson', 'net.creeperhost.creeperbackups.blue.endless.jankson'

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}-${rootProject.minecraft_version}"
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
